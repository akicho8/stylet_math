#+OPTIONS: toc:nil num:nil author:nil creator:nil \n:nil |:t
#+OPTIONS: @:t ::t ^:t -:t f:t *:t <:t

* ベクトルとかのライブラリ

  styleからSDLに依存してない数学系の汎用ライブラリを単体で使いたかったので抜き出したもの

  - [[https://travis-ci.org/akicho8/stylet_math][Travis]]: [[https://travis-ci.org/akicho8/stylet_math.png]]
  - [[https://gemnasium.com/akicho8/stylet_math/][Gemnasium]]: [[https://gemnasium.com/akicho8/stylet_math.png]]
  - [[https://codeclimate.com/github/akicho8/stylet_math][Code Climate]]: [[https://codeclimate.com/github/akicho8/stylet_math.png]]

: Point.new                                      # => [nil, nil]
: Point[1, 2]                                    # => [1, 2]
: Point[1, 2].members                            # => [:x, :y]
: Point[1, 2].values                             # => [1, 2]
: Point[1, 2]                                    # => [1, 2]
: 
: Vector.superclass                              # => Stylet::Point2
: 
: Vector.new                                     # => [0.0, 0.0]
: Vector.new                                     # => [0.0, 0.0]
: Vector.new(1, 2)                               # => [1, 2]
: 
: Vector.zero                                    # => [0.0, 0.0]
: Vector.one                                     # => [1.0, 1.0]
: 
: a = Vector[1, 2]
: b = Vector[3, 4]
: 
: a + b                                          # => [4.0, 6.0]
: a - b                                          # => [-2.0, -2.0]
: a * 2                                          # => [2.0, 4.0]
: a / 2                                          # => [0.5, 1.0]
: 
: a.add(b)                                       # => [4.0, 6.0]
: a.sub(b)                                       # => [-2.0, -2.0]
: a.scale(2)                                     # => [2.0, 4.0]
: a.mul(2)                                       # => [2.0, 4.0]
: a.div(2)                                       # => [0.5, 1.0]
: 
: Vector.one.reverse                             # => [-1.0, -1.0]
: -Vector.one                                    # => [-1.0, -1.0]
: 
: Vector[3, 4].normalize                         # => [0.6, 0.8]
: 
: Vector.one.normalize                           # => [0.7071067811865475, 0.7071067811865475]
: Vector.one.magnitude                           # => 1.4142135623730951
: Vector.one.magnitude_sq                        # => 2.0
: 
: v = Vector.rand
: v.round(2)                                     # => [-0.52, 0.85]
: v.round                                        # => [-1, 1]
: v.floor                                        # => [-1, 0]
: v.ceil                                         # => [0, 1]
: v.truncate                                     # => [0, 0]
: 
: Vector.rand                                    # => [-0.4848020605284271, 0.8126918196451847]
: Vector.rand(3)                                 # => [2, 0]
: Vector.rand(3..4)                              # => [4, 3]
: Vector.rand(3.0..4)                            # => [3.3391996460372373, 3.799887748868171]
: Vector.rand(-2.0..2.0)                         # => [-0.7118201949120793, -0.26682005217745086]
: 
: Vector[1, 0].inner_product(Vector[1, 0])       # => 1
: Vector[1, 0].inner_product(Vector[-1, 0])      # => -1
: 
: Vector.cross_product(Vector.rand, Vector.rand) # => 0.5333162572409049
: 
: Vector.rand.distance_to(Vector.rand)           # => 0.8634596196444447
: 
: v = Vector.new
: v.object_id                                    # => 70308396077900
: v.replace(Vector.rand)                       # => [-0.5913794734970825, 0.2642720026589105]
: v.object_id                                    # => 70308396077900
: 
: Vector.zero.distance_to(Vector.one)            # => 1.4142135623730951
: 
: Vector.zero.zero?                              # => true
: Vector.one.nonzero?                            # => true
: 
: Vector.zero.inspect                            # => "[0.0, 0.0]"
: Vector.zero.to_s                               # => "[0.0, 0.0]"

*** 当たり判定を高速化するには？

   当たり判定を次のようにしているとき

   : if v.magnitude < r
   : end

   次のようにすると sqrt を省略できる

   : if v.magnitude_sq < r ** 2
   : end

*** a地点からb地点へのベクトルを求めるには？

    b - a
